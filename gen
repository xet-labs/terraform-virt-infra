#!/bin/bash

scriptPath="$(readlink -f ${BASH_SOURCE[0]:-$0})"
scriptDir="$(dirname "${scriptPath}")";
scriptName=${0##*/}
source "/x//libxlvini"


set -e
# Defaults
PREFIX="node"
PURGE=false
SCRIPT=""
TF_COUNT=3

usage() {
    echo "Usage: $0 [-p prefix] [-c command/script] [-x purge_all] [-n vm_count]"
    echo "  -p prefix       : VM name prefix (default: node)"
    echo "  -c command      : Command or script to run inside all matching VMs"
    echo "  -x              : Purge all VMs including data disks"
    echo "  -n vm_count     : Number of VMs (Terraform count variable, default: 3)"
    exit 1
}

# Parse arguments
while getopts "p:c:xn:" opt; do
    case $opt in
        p) PREFIX="$OPTARG" ;;
        c) SCRIPT="$OPTARG" ;;
        x) PURGE=true ;;
        n) TF_COUNT="$OPTARG" ;;
        *) usage ;;
    esac
done

sinf "Using prefix: $PREFIX"
sinf "VM count: $TF_COUNT"
[ -n "$SCRIPT" ] && sinf "Will execute script/command inside VMs"

# Shutdown running VMs
smsg "Stopping Nodes..."
for vm in $(virsh list --name | grep "^$PREFIX"); do
    sinf "Shutdown $vm"
    virsh shutdown "$vm" || true
done
sleep 5

# Optionally purge VMs
if [ "$PURGE" = true ]; then
    swrn "Purging all matching VMs and disks..."
    for vm in $(virsh list --all --name | grep "^$PREFIX"); do
        sinf "Undefining $vm..."
        virsh undefine "$vm" --remove-all-storage || true
    done
else
    # Just undefine without touching persistent data
    for vm in $(virsh list --all --name | grep "^$PREFIX"); do
        sinf "Undefining $vm..."
        virsh undefine "$vm" || true
    done

    # Remove only root disks (fresh OS)
    for disk in /var/lib/libvirt/images/${PREFIX}*-root.qcow2; do
        [ -f "$disk" ] && rm -f "$disk"
    done
fi

smsg "Starting Terraform Ops..."
# Set Terraform variables
export TF_VAR_ssh_public_key="$(cat /x/.cred/ssh/o-mx-vm.pub)"
export TF_VAR_vm_count="${TF_COUNT:-1}"

# Apply Terraform to recreate domains (data disks are persistent)
# terraform destroy -auto-approve
# terraform apply -target=libvirt_domain.node -auto-approve
terraform apply -auto-approve


# Wait for VMs to come up and show IPs
sleep 20
for vm in $(virsh list --name | grep "^$PREFIX"); do
    echo "Waiting for IP of $vm..."
    until virsh domifaddr "$vm" >/dev/null 2>&1; do
        sleep 2
    done
    virsh domifaddr "$vm"

    # Run script/command if provided
    if [ -n "$SCRIPT" ]; then
        echo "Executing script inside $vm..."
        ssh root@"$vm" "$SCRIPT"
    fi
done

echo "Done."
